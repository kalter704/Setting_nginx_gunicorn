Методичка по Web-серверам
Web-технологии (первый семестр)
Первым шагом в создании вашего проекта является настройка серверов. 
К сожалению, эта первая (и достаточно важная) часть вызывает у студентов много 
трудностей и мешает двигаться дальше.

Поэтому мы решили помочь вам и написали туториал по их настройке.
Описанные тут действия выполнялись на Ubuntu 14.04.1 LTS.


Архитектура вашего проекта предполагает 2 сервера:
Nginx (frontend сервер) принимает все входящие http запросы, отдает статику 
(картинки, css стили, js скрипты), остальные запросы перенаправляет на другой 
сервер Gunicorn
Gunicorn (backend сервер) отдает динамические страницы в зависимости от логики 
вашего сайта.

Gunicorn

1. Устанавливаем сервер из репозитория ОС

$ sudo apt-get update
$ sudo apt-get install gunicorn


Рекомендуем устанавливать сервер именно из репозитория ubuntu, в этом случае вы 
вам будут доступны команды для управления сервером.

$ gunicorn -v
gunicorn (version 17.5)


2. Конфигурация сервера

Создайте простое wsgi приложение в директории вашего проекта.

$ vim wsgi.py

def application(env, start_response):
	start_response('200 OK', [('Content-Type', 'text/html')])
	return ["Hello!"]


Затем укажите параметры запуска gunicorn следующим образом.

$ sudo vim /etc/gunicorn.d/wsgi

CONFIG = {
	'mode': 'wsgi',
	'working_dir': '<абсолютный путь к вашему проекту>',
	'user': 'www-data',
	'group': 'www-data',
	'args': (
		...
    		'wsgi:application',
	),
}


working_dir — директория в которую “перейдет” сервер перед началом работы. 
Из этой же директории python будет пытаться загружать файлы. Для того что бы 
загрузить wsgi.py тут должен быть прописан путь к вашему проекту.
user, group — пользователь и группа, от которых запусается сервер. Для удобства 
можно указать имя вашего пользователя и группы.
args — параметры запуска (порт, на котором будет запущен сервер, количество 
процессов и т.д.). Обратите внимание на последний аргумент ‘wsgi:application’ — 
это указание на модуль и функцию вашего WSGI приложения. Например если ваш WSGI 
скрипт называется hello.py, последний аргумент должен выглядеть как 
‘hello:application’.

Информацию по настройке смотрите в документации github.com/benoitc/gunicorn/blob/17.5/docs/source/settings.rst

Django проект запускается аналогично.

$ sudo vim /etc/gunicorn.d/django


3. Управление процессом сервера

Для остановки/запуска/перезапуска сервера используйте команды

$ sudo service gunicorn start
$ sudo service gunicorn stop
$ sudo service gunicorn restart
$ sudo service gunicorn reload


Что бы проверить запущен ли сервер, используйте команду

$ ps ax | grep gunicorn
root     14431  0.2  0.2  67788 10876 ?        S    13:25   0:00 /usr/bin/python /usr/bin/gunicorn --pid /var/run/gunicorn/wsgi.pid --name wsgi --user www-data --group 
www-data 14436  0.0  0.2  67924 10044 ?        S    13:25   0:00 /usr/bin/python /usr/bin/gunicorn --pid /var/run/gunicorn/wsgi.pid --name wsgi --user www-data --group 
www-data 14437  0.0  0.2  67924 10020 ?        S    13:25   0:00 /usr/bin/python /usr/bin/gunicorn --pid /var/run/gunicorn/wsgi.pid --name wsgi --user www-data --group 
www-data 14438  0.0  0.2  67924 10016 ?        S    13:25   0:00 /usr/bin/python /usr/bin/gunicorn --pid /var/run/gunicorn/wsgi.pid --name wsgi --user www-data --group


В случае, если сервер не запускается, посмотрите ошибку в логах

$ less -S /var/log/gunicorn/wsgi.log


Nginx

1. Устанавливаем сервер из репозитория ОС

$ sudo apt-get update
$ sudo apt-get install nginx


После установки в ubuntu сервер запускается автоматически и прописывается в автозагрузку. По адресу 127.0.0.1/ вы увидите приветственную картинку с «Welcome to nginx!».

2. Управление процессом сервера

Для остановки/запуска/перезапуска сервера в ubuntu существуют команды

$ sudo service nginx stop
$ sudo service nginx start
$ sudo service nginx restart


После изменения настроек nginx сервер должен перечитать файл конфигурации. Это обычно делают с помощью команды

$ sudo service nginx reload


Такая команда не приводит к остановке сервера, что важно в продакшне. 
Чтобы проверить, запущен ли сервер, запустите команду

$ ps ax | grep nginx

11645 ?    	Ss 	0:00 nginx: master process /usr/sbin/nginx
11829 ?    	S  	0:00 nginx: worker process
11830 ?    	S  	0:00 nginx: worker process
11831 ?    	S  	0:00 nginx: worker process
11832 ?    	S  	0:00 nginx: worker process
11837 pts/1	S+ 	0:00 grep --color=auto nginx


3. Общая настройка nginx

Файл конфигурации находится в /etc/nginx/nginx.conf
Он состоит из блоков и одиночных директив:


user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
	...
}

http {
	...
	server {
    	...
    	location ... { ... }
    	location ... { ... }
	}
}

mail {
   ...
}


Корневые настройки определяют параметры запуска сервера: от какого пользователя запускается сервер, сколько процессов обрабатывают запросы, где лежит pid-файл и др nginx.org/ru/docs/ngx_core_module.html.

Секция events содержит параметры, влияющие на обработку соединений. Параметров по умолчанию будет достаточно.

Секция http определяет работу nginx как http-сервера. Ваша настройка должна вестись именно в этой секции.

Секция mail определяет работу nginx как почтового прокси сервера. В домашнем задании это не нужно использовать.

Параметры конфигурации имеют свой контекст и могут иметь значение по умолчанию. К примеру, директива root nginx.org/ru/docs/http/ngx_http_core_module.html#root, определенная в секции server, применяется и внутри location. Вне server используется значение по умолчанию.
Возьмите предлагаемый убунтой файл настроек за основу. Сохраните исходный вариант перед изменениями этого файла. Для его редактирования необходимы права суперпользователя, например

$ sudo vim /etc/nginx/nginx.conf


Обычно один сервер nginx обслуживает несколько сайтов на разных доменах, поэтому хорошей практикой является разделение корневого конфига (/etc/nginx/nginx.conf) и отдельных для каждого виртуального хоста (они лежат в папке /etc/nginx/sites-enabled/)
Уберите закомментированные директивы, которые вам не нужны, остальные лучше не удалять (особенно если не уверены, что они означают).
4. Настройка nginx для отдачи статики и проксирования запросов

Секция server содержит несколько важных директив
listen nginx.org/ru/docs/http/ngx_http_core_module.html#listen Задаёт адрес и порт для IP, на которых сервер будет принимать запросы.
server_name nginx.org/ru/docs/http/server_names.html Определяет имя сервера для обработки запроса. Это может быть произвольное доменное имя или регулярное выражение. Nginx будет использовать данную секцию server для тех запросов, загловок Host в которых совпадает с server_name
location nginx.org/ru/docs/http/ngx_http_core_module.html#location Устанавливает конфигурацию в зависимости от URI запроса. Обратите внимание на модификаторы [ = | ~ | ~* | ^~ ], который определяют приоритет блоков location при обработке запроса.
root nginx.org/ru/docs/http/ngx_http_core_module.html#root и alias nginx.org/ru/docs/http/ngx_http_core_module.html#alias определяют место на диске, с которого нужно отдавать статику для запроса.
Параметры, начинающиеся с префикса proxy_ nginx.org/en/docs/http/ngx_http_proxy_module.html, указывают, как перенаправялять запросы на другой сервер (в нашем случае gunicorn)

Для того что бы проксировать запрос на другой сервер, в соответствующем ему локейшене нужно вместо root или alias указать директиву proxy_pass. При это возможно два вариант: просто указать адрес сервера proxy_pass 127.0.0.1:8080 или сконфигурировать и использовать upstream nginx.org/en/docs/http/ngx_http_upstream_module.html Второй вариант позволит вам управлять балансировкой.
При проксировании важно передавать заголовок Host исходного запроса и ip адрес клиента.

proxy_set_header Host  	$host;
proxy_set_header X-Real-IP $remote_addr;


Частые ошибки

Убедитесь, что ваш сервер имеет необходимые права на чтение файлов
После изменений настроек не забывайте делать restart или reload сервера
Смотрите логи (/var/log/gunicorn/, /var/log/nginx/). В них содержится информация о том, что делает сервер.
Если ваш браузер не отображает какой-то файл, откройте консоль браузера (F12), закладку Network и посмотри, что именно отвечает вам сервер. Правильный ли код ответа (200)? Правильный ли Content-Type ?
